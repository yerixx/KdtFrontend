{"ast":null,"code":"var _jsxFileName = \"/Users/yerixxz/Documents/code/kdtFrontend/241101/01kanban/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { createGlobalStyle, styled } from \"styled-components\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./components/Board\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin:0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  ul, li {\n    list-style: none;\n  }\n\n  a { \n    text-decoration: none;\n    color: inherit;\n  }\n\n  body {\n    background: ${props => props.theme.bgColor};\n    color: #000;\n  }\n`;\n_c = GlobalStyle;\nconst Wrapper = styled.main`\n  width: 1200px;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`;\n_c2 = Wrapper;\nconst Boards = styled.div`\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n`;\n_c3 = Boards;\nconst App = () => {\n  _s();\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = info => {\n    console.log(info);\n    // console.log(destination, draggableId, source);\n    const {\n      destination,\n      source,\n      draggableId\n    } = info;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId) {\n      setToDos(oldToDos => {\n        const boardCopy = [oldToDos[source.droppableId]];\n        const taskObj = boardCopy[source.index];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination.index, 0, taskObj);\n        return {\n          ...oldToDos,\n          [source.droppableId]: boardCopy\n        };\n      });\n    }\n    // if (destination?.droppableId === source.droppableId) {\n    //   setToDos((oldToDos) => {\n    //     const boardCopy = [...oldToDos[source.droppableId]];\n    //     boardCopy.splice(source.index, 1);\n    //     boardCopy.splice(destination.index, 0, draggableId);\n    //     return {\n    //       ...oldToDos,\n    //       [source.droppableId]: boardCopy,\n    //     };\n    //   });\n    // }\n\n    // if (destination.droppableId !== source.droppableId) {\n    //   setToDos((oldToDos) => {\n    //     const sourceBoard = [...oldToDos[source.droppableId]];\n    //     const destinationBoard = [...oldToDos[destination.droppableId]];\n    //     sourceBoard.splice(source.index, 1);\n    //     destinationBoard.splice(destination.index, 0, draggableId);\n    //     return {\n    //       ...oldToDos,\n    //       [source.droppableId]: sourceBoard,\n    //       [destination?.droppableId]: destinationBoard,\n    //     };\n    //   });\n    // }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Wrapper, {\n        children: /*#__PURE__*/_jsxDEV(Boards, {\n          children: Object.keys(toDos).map(boardId => /*#__PURE__*/_jsxDEV(Board, {\n            toDos: toDos[boardId],\n            boardId: boardId\n          }, boardId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"5a67h5XNEBDPty+W6+XWtUnHNYw=\", false, function () {\n  return [useRecoilState];\n});\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GlobalStyle\");\n$RefreshReg$(_c2, \"Wrapper\");\n$RefreshReg$(_c3, \"Boards\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["createGlobalStyle","styled","DragDropContext","useRecoilState","toDoState","Board","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalStyle","props","theme","bgColor","_c","Wrapper","main","_c2","Boards","div","_c3","App","_s","toDos","setToDos","onDragEnd","info","console","log","destination","source","draggableId","droppableId","oldToDos","boardCopy","taskObj","index","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","boardId","_c4","$RefreshReg$"],"sources":["/Users/yerixxz/Documents/code/kdtFrontend/241101/01kanban/src/App.tsx"],"sourcesContent":["import { createGlobalStyle, styled } from \"styled-components\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./components/Board\";\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin:0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  ul, li {\n    list-style: none;\n  }\n\n  a { \n    text-decoration: none;\n    color: inherit;\n  }\n\n  body {\n    background: ${(props) => props.theme.bgColor};\n    color: #000;\n  }\n`;\n\nconst Wrapper = styled.main`\n  width: 1200px;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`;\n\nconst Boards = styled.div`\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n`;\n\nconst App = () => {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = (info: DropResult) => {\n    console.log(info);\n    // console.log(destination, draggableId, source);\n    const { destination, source, draggableId } = info;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId) {\n      setToDos((oldToDos) => {\n        const boardCopy = [oldToDos[source.droppableId]];\n        const taskObj = boardCopy[source.index];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination.index, 0, taskObj);\n        return {\n          ...oldToDos,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n    // if (destination?.droppableId === source.droppableId) {\n    //   setToDos((oldToDos) => {\n    //     const boardCopy = [...oldToDos[source.droppableId]];\n    //     boardCopy.splice(source.index, 1);\n    //     boardCopy.splice(destination.index, 0, draggableId);\n    //     return {\n    //       ...oldToDos,\n    //       [source.droppableId]: boardCopy,\n    //     };\n    //   });\n    // }\n\n    // if (destination.droppableId !== source.droppableId) {\n    //   setToDos((oldToDos) => {\n    //     const sourceBoard = [...oldToDos[source.droppableId]];\n    //     const destinationBoard = [...oldToDos[destination.droppableId]];\n    //     sourceBoard.splice(source.index, 1);\n    //     destinationBoard.splice(destination.index, 0, draggableId);\n    //     return {\n    //       ...oldToDos,\n    //       [source.droppableId]: sourceBoard,\n    //       [destination?.droppableId]: destinationBoard,\n    //     };\n    //   });\n    // }\n  };\n  return (\n    <>\n      <GlobalStyle />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Wrapper>\n          <Boards>\n            {Object.keys(toDos).map((boardId) => (\n              <Board key={boardId} toDos={toDos[boardId]} boardId={boardId} />\n            ))}\n          </Boards>\n        </Wrapper>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}